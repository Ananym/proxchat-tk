<Window x:Class="ProxChatClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProxChatClient"
        xmlns:vm="clr-namespace:ProxChatClient.ViewModels"
        xmlns:converters="clr-namespace:ProxChatClient.Converters"
        xmlns:controls="clr-namespace:ProxChatClient.Controls"
        mc:Ignorable="d"
        Title="ProxChatTK" Width="800" MinHeight="550" MinWidth="700"
        SizeToContent="Height"
        d:DataContext="{d:DesignInstance Type=vm:MainViewModel, IsDesignTimeCreatable=True}" 
        WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converters:MuteButtonContentConverter x:Key="MuteButtonContentConverter"/>
        <converters:EditButtonContentConverter x:Key="EditButtonContentConverter"/>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InputLevelThresholdColorConverter x:Key="InputLevelThresholdColorConverter"/>
    </Window.Resources>

    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" MinWidth="350"/>
            <ColumnDefinition Width="*" MinWidth="300"/>
        </Grid.ColumnDefinitions>

        <!-- Left Column -->
        <Grid Grid.Column="0" Margin="0,0,5,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Audio Device Selection (Row 0) -->
        <StackPanel Grid.Row="0" Margin="0,0,0,10">
            <Label Content="Input Device:"/>
            <ComboBox ItemsSource="{Binding InputDevices}"
                      SelectedItem="{Binding SelectedInputDevice}"
                      IsEnabled="{Binding IsRunning, Converter={StaticResource InverseBooleanConverter}}"
                      Margin="0,0,0,5"/>
            <Button Content="Refresh Devices" 
                    Command="{Binding RefreshDevicesCommand}"
                    IsEnabled="{Binding IsRunning, Converter={StaticResource InverseBooleanConverter}}"
                    Margin="0,0,0,10"/>
        </StackPanel>

        <!-- Audio Controls (Row 1) -->
        <StackPanel Grid.Row="1" Margin="0,0,0,10">
            <Label>
                <TextBlock>
                    <Run Text="Microphone Input Volume: ("/>
                    <Run Text="{Binding InputVolumeScale, StringFormat='{}{0:F1}'}"/>
                    <Run Text=")"/>
                </TextBlock>
            </Label>
            <Slider Value="{Binding InputVolumeScale}"
                    Minimum="0" Maximum="5"
                    TickFrequency="0.1"
                    SmallChange="0.1"
                    LargeChange="0.5"
                    IsSnapToTickEnabled="True"
                    ToolTip="Controls the volume of your microphone input when transmitting"/>
            
            <Label Margin="0,10,0,0">
                <TextBlock>
                    <Run Text="Overall Output Volume: ("/>
                    <Run Text="{Binding VolumeScale, StringFormat='{}{0:F2}'}"/>
                    <Run Text=")"/>
                </TextBlock>
            </Label>
            <Slider Value="{Binding VolumeScale}"
                    Minimum="0" Maximum="1"
                    TickFrequency="0.05"
                    SmallChange="0.05"
                    LargeChange="0.1"
                    IsSnapToTickEnabled="True"
                    ToolTip="Controls the overall volume of all received audio"/>

            <!-- Move Threshold Above Input Level -->
            <Label Margin="0,10,0,0">
                <TextBlock>
                    <Run Text="Minimum Broadcast Threshold: ("/>
                    <Run Text="{Binding MinBroadcastThreshold, StringFormat='{}{0:F2}'}"/>
                    <Run Text=")"/>
                </TextBlock>
            </Label>
            <Slider Value="{Binding MinBroadcastThreshold}"
                    Minimum="0" Maximum="1"
                    TickFrequency="0.01"
                    SmallChange="0.01"
                    LargeChange="0.05"
                    IsSnapToTickEnabled="True"
                    ToolTip="Audio below this level will not be broadcast"/>

            <!-- Input Level Display, now stretches -->
            <Grid Margin="0,10,0,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Label Content="Input Level:" Grid.Column="0" VerticalAlignment="Center"/>
                <ProgressBar Value="{Binding AudioLevel, Mode=OneWay}"
                             Height="15"
                             Minimum="0" Maximum="1"
                             Grid.Column="1"
                             VerticalAlignment="Center"
                             x:Name="InputLevelBar">
                    <ProgressBar.Foreground>
                        <MultiBinding Converter="{StaticResource InputLevelThresholdColorConverter}">
                            <Binding Path="AudioLevel"/>
                            <Binding Path="MinBroadcastThreshold"/>
                        </MultiBinding>
                    </ProgressBar.Foreground>
                </ProgressBar>
            </Grid>

            <!-- Push to Talk Controls, stretch KeyBindingEditor -->
            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" 
                    BorderThickness="1" 
                    Margin="0,10,0,0" 
                    Padding="5">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <CheckBox Content="Push to Talk" 
                              IsChecked="{Binding IsPushToTalk}"
                              VerticalAlignment="Center"
                              MinWidth="100"
                              Grid.Column="0"
                              ToolTip="Enable push-to-talk mode - only transmit while key is held"/>
                    
                    <!-- PTT Active Indicator -->
                    <Ellipse Grid.Column="1" 
                             Width="12" 
                             Height="12"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Center"
                             ToolTip="Push-to-talk key is currently pressed">
                        <Ellipse.Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsPushToTalk}" Value="True"/>
                                            <Condition Binding="{Binding IsPushToTalkActive}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="Fill" Value="LimeGreen"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsPushToTalk}" Value="True"/>
                                            <Condition Binding="{Binding IsPushToTalkActive}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="Fill" Value="Transparent"/>
                                        <Setter Property="Stroke" Value="DarkGray"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                    
                    <controls:KeyBindingEditor x:Name="PushToTalkKeyEditor"
                                            Hotkey="{Binding PushToTalkHotkey, Mode=TwoWay}"
                                            HotkeyChanged="PushToTalkKeyEditor_HotkeyChanged"
                                            IsEnabled="{Binding IsPushToTalk}"
                                            HorizontalAlignment="Stretch"
                                            MinWidth="100"
                                            Margin="10,0,0,0"
                                            Grid.Column="2"
                                            ToolTip="Global hotkey for push-to-talk (works system-wide, supports modifiers like Ctrl+F12)"/>
                </Grid>
            </Border>

            <!-- Mute Self Controls, stretch KeyBindingEditor -->
            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" 
                    BorderThickness="1" 
                    Margin="0,5,0,0" 
                    Padding="5">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="120"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <CheckBox Content="Mute Self" 
                              IsChecked="{Binding IsSelfMuted, Mode=OneWay}"
                              Command="{Binding ToggleSelfMuteCommand}"
                              VerticalAlignment="Center"
                              MinWidth="120"
                              Grid.Column="0"
                              ToolTip="Toggle microphone mute on/off"/>
                    <controls:KeyBindingEditor x:Name="MuteSelfKeyEditor"
                                            Hotkey="{Binding MuteSelfHotkey, Mode=TwoWay}"
                                            HotkeyChanged="MuteSelfKeyEditor_HotkeyChanged"
                                            HorizontalAlignment="Stretch"
                                            MinWidth="100"
                                            Margin="10,0,0,0"
                                            Grid.Column="1"
                                            ToolTip="Global hotkey to toggle mute (works system-wide, supports modifiers like Ctrl+F11)"/>
                </Grid>
            </Border>
        </StackPanel>

        <!-- Start/Stop Toggle Button (Row 2) -->
        <Button Grid.Row="2" 
                Command="{Binding StartCommand}"
                Margin="0,0,0,10"
                Height="40"
                FontSize="16"
                FontWeight="Bold">
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="Content" Value="Start"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsRunning}" Value="True">
                            <Setter Property="Content" Value="Stop"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

            <!-- Game Position (Row 3) -->
            <GroupBox Grid.Row="3" Header="Current Position" Margin="0,5,0,0">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Map: " FontWeight="Bold" Margin="0,0,2,0"/>
                <TextBlock Text="{Binding CurrentMapDisplay, FallbackValue=N/A}" Margin="0,0,10,0"/>
                <TextBlock Text="X: " FontWeight="Bold" Margin="0,0,2,0"/>
                <TextBlock Text="{Binding CurrentX, FallbackValue=0}" Margin="0,0,10,0"/>
                <TextBlock Text="Y: " FontWeight="Bold" Margin="0,0,2,0"/>
                <TextBlock Text="{Binding CurrentY, FallbackValue=0}"/>
            </StackPanel>
        </GroupBox>
        
            <!-- Debug Controls (Row 4) -->
            <GroupBox Grid.Row="4" Header="Debug Controls" Margin="0,5,0,0"
                  Visibility="{Binding IsDebugModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
            <StackPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <Label Grid.Row="0" Grid.Column="0" Content="Char Name:" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding DebugCharacterName, UpdateSourceTrigger=PropertyChanged}" Margin="5,2"/>

                    <Label Grid.Row="1" Grid.Column="0" Content="Map ID:" VerticalAlignment="Center"/>
                    <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding DebugMapId, UpdateSourceTrigger=PropertyChanged}" Margin="5,2"/>

                    <Label Grid.Row="2" Grid.Column="0" Content="X Pos:" VerticalAlignment="Center"/>
                    <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal">
                        <Button Content="-" Command="{Binding DecrementDebugXCommand}" Width="25" Margin="5,2"/>
                        <TextBox Text="{Binding DebugX, UpdateSourceTrigger=PropertyChanged}" Width="60" Margin="2" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"/>
                        <Button Content="+" Command="{Binding IncrementDebugXCommand}" Width="25" Margin="2,2,5,2"/>
                    </StackPanel>

                    <Label Grid.Row="3" Grid.Column="0" Content="Y Pos:" VerticalAlignment="Center"/>
                    <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
                        <Button Content="-" Command="{Binding DecrementDebugYCommand}" Width="25" Margin="5,2"/>
                        <TextBox Text="{Binding DebugY, UpdateSourceTrigger=PropertyChanged}" Width="60" Margin="2" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"/>
                        <Button Content="+" Command="{Binding IncrementDebugYCommand}" Width="25" Margin="2,2,5,2"/>
                    </StackPanel>

                        <Label Grid.Row="4" Grid.Column="0" Content="Audio Input:" VerticalAlignment="Center"/>
                        <StackPanel Grid.Row="4" Grid.Column="1" Orientation="Vertical" Margin="5,2">
                            <CheckBox Content="Use Audio File" IsChecked="{Binding UseWavInput}" VerticalAlignment="Center" Margin="0,0,0,5"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" 
                                          Text="{Binding AudioFileDisplayName}" 
                                          VerticalAlignment="Center" 
                                          TextTrimming="CharacterEllipsis"
                                          ToolTip="{Binding SelectedAudioFile}"
                                          Margin="0,0,5,0"/>
                                <Button Grid.Column="1" 
                                       Content="Browse..." 
                                       Command="{Binding BrowseAudioFileCommand}"
                                       MinWidth="60"
                                       Height="22"/>
                            </Grid>
                        </StackPanel>
                </Grid>
            </StackPanel>
            </GroupBox>
        
            <!-- Status Bar (Row 5) -->
            <Grid Grid.Row="5" Margin="0,5,0,0">
                <StatusBar>
                <StatusBarItem>
                    <TextBlock Text="{Binding StatusMessage}" TextTrimming="CharacterEllipsis"/>
                </StatusBarItem>
            </StatusBar>
        </Grid>
        </Grid>

        <!-- Right Column - Connected Peers -->
        <GroupBox Grid.Column="1" Header="Connected Peers" Margin="5,0,0,0">
            <ListView ItemsSource="{Binding ConnectedPeers}" 
                      HorizontalContentAlignment="Stretch">
                <ListView.ItemTemplate>
                    <DataTemplate DataType="{x:Type vm:PeerViewModel}"> 
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="90"/>
                                <ColumnDefinition Width="Auto" MinWidth="60"/>
                                <ColumnDefinition Width="*" MinWidth="100"/>
                                <ColumnDefinition Width="Auto" MinWidth="60"/>
                            </Grid.ColumnDefinitions>
                            
                            <StackPanel Grid.Column="0" Orientation="Horizontal">
                                <!-- Transmission indicator -->
                                <Ellipse Width="12" Height="12" 
                                         Margin="0,0,8,0" 
                                         VerticalAlignment="Center"
                                         ToolTip="Audio transmission indicator">
                                    <Ellipse.Style>
                                        <Style TargetType="Ellipse">
                                            <Setter Property="Fill" Value="DarkGray"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsTransmitting}" Value="True">
                                                    <Setter Property="Fill" Value="LimeGreen"/>
                                                    <Setter Property="Effect">
                                                        <Setter.Value>
                                                            <DropShadowEffect Color="LimeGreen" BlurRadius="4" ShadowDepth="0" Opacity="0.8"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>
                                
                                <TextBlock Text="{Binding CharacterName, FallbackValue=Loading...}"
                                           ToolTip="{Binding Id}" 
                                           TextTrimming="CharacterEllipsis"
                                           VerticalAlignment="Center"/>
                            </StackPanel>
                            
                            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="5,0">
                                <TextBlock Text="Distance: " VerticalAlignment="Center"/>
                                <TextBlock Text="{Binding DistanceDisplay}"
                                        ToolTip="Distance"
                                        VerticalAlignment="Center"/>
                            </StackPanel>
                                        
                            <Grid Grid.Column="2" Margin="5,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Row="0" Text="Volume" HorizontalAlignment="Center" Margin="0,0,0,2"/>
                                <Slider Grid.Row="1" Value="{Binding Volume, Mode=TwoWay}" 
                                        Minimum="0" Maximum="1"
                                        SmallChange="0.05" LargeChange="0.1"
                                        ToolTip="Peer Volume"
                                        HorizontalAlignment="Stretch"/>
                            </Grid>
                                    
                            <Button Grid.Column="3"
                                    Content="{Binding IsMuted, Converter={StaticResource MuteButtonContentConverter}, FallbackValue=Mute}"
                                    Command="{Binding DataContext.ToggleMuteCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                    CommandParameter="{Binding Id}"
                                    MinWidth="50"/>
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </GroupBox>
    </Grid>
</Window>
